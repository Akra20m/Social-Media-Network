{"version":3,"sources":["api/flaskapi.js","actions/index.js","components/Login.js","components/Register.js","components/Main.js","components/PostEdit.js","helper/index.js","components/Comment.js","components/PostsLists.js","components/CreatePost.js","components/Logout.js","components/Header.js","components/Dashboard.js","components/AvatarDropdown.js","components/Personal.js","components/Profile.js","components/App.js","reducers/userReducer.js","reducers/avatarReducer.js","reducers/index.js","reducers/postReducer.js","reducers/userPostsReducer.js","reducers/commentReducer.js","index.js"],"names":["flaskAPI","axios","create","baseURL","deletePost","token","id","dispatch","a","delete","headers","Authorization","type","payload","console","log","response","Login","onSubmit","values","props","loginUser","change","input","label","className","required","this","user","status","isLoggedIn","to","handleSubmit","Field","name","component","renderInput","errormsg","React","Component","connect","state","post","data","reduxForm","form","Register","createUser","msg","Main","PostEdit","editPost","access_token","maxLength","placeholder","rows","username","ReactDOM","createPortal","style","position","onClick","editClose","document","querySelector","ownProps","userPost","put","avatarInfo","avatarOptions","key","value","image","avatar","src","Comment","newValues","comment","createComment","deleteOnClick","deleteComment","renderDelete","role","bind","Aria-label","renderComments","map","ReactEmoji","emojify","alt","date","substr","fetchComments","obj","get","postid","PostsLists","show","more","fetchSomePosts","length","editOpen","setState","displayComment","renderDeleteEdit","renderPosts","noMoreAll","checkMore","renderEdit","Object","fetchPosts","CreatePost","createPost","Logout","logoutUser","window","localStorage","clear","Dashboard","fetchAvatars","backgroundColor","AvatarDropdown","onAvatarChange","e","updateAvatar","Dropdown","text","icon","floating","labeled","button","Menu","Header","content","option","Item","Personal","email","Profile","fetchUserPosts","noMoreUser","App","path","exact","combineReducers","formReducer","action","_","mapKeys","omit","presistedState","serializedState","sessionStorage","getItem","JSON","parse","loadFromSessionStorage","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDom","render","subscribe","stringify","setItem","saveToSessionStorage","getState"],"mappings":"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","file":"static/js/main.f8dc572b.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst flaskAPI = axios.create({\r\n  baseURL: \"https://social-network-akram.herokuapp.com\"\r\n  //baseURL: \"http://localhost:5000\"\r\n});\r\n\r\nexport default flaskAPI;\r\n","import flaskAPI from \"../api/flaskapi\";\r\n\r\nexport const createUser = values => async dispatch => {\r\n  try {\r\n    const response = await flaskAPI.post(\"/users\", values);\r\n    dispatch({ type: \"REGISTER_USER\", payload: { status: response.status } });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: \"REGISTER_ERROR\",\r\n      payload: { status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\nexport const loginUser = values => async dispatch => {\r\n  try {\r\n    const response = await flaskAPI.post(\"/login\", values);\r\n    dispatch({\r\n      type: \"LOGIN_USER\",\r\n      payload: { ...response.data, status: response.status }\r\n    });\r\n  } catch (err) {\r\n    dispatch({ type: \"LOGIN_ERROR\", payload: { status: err.response.status } });\r\n  }\r\n};\r\n\r\nexport const fetchPosts = token => async dispatch => {\r\n  try {\r\n    const response = await flaskAPI.get(\"/posts\", {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    dispatch({ type: \"FETCH_POSTS\", payload: response.data });\r\n  } catch (err) {\r\n    if (err.response.status === 401) {\r\n      dispatch({\r\n        type: \"AUTH_ERROR\",\r\n        payload: { isLoggedIn: false, access_token: \"\" }\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport const fetchSomePosts = (token, id) => async dispatch => {\r\n  try {\r\n    const response = await flaskAPI.get(`/posts/${id}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    dispatch({ type: \"FETCH_POSTS\", payload: response.data[0] });\r\n    dispatch({ type: \"NO_MORE\", payload: response.data[1] });\r\n  } catch (err) {\r\n    if (err.response.status === 401) {\r\n      dispatch({\r\n        type: \"AUTH_ERROR\",\r\n        payload: { isLoggedIn: false, access_token: \"\" }\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport const fetchUserPosts = (token, username, id) => async dispatch => {\r\n  try {\r\n    const response = await flaskAPI.get(`/users/${username}/${id}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    dispatch({ type: \"FETCH_USER_POSTS\", payload: response.data[0] });\r\n    dispatch({ type: \"NO_MORE\", payload: response.data[1] });\r\n  } catch (err) {\r\n    if (err.response.status === 401) {\r\n      dispatch({\r\n        type: \"AUTH_ERROR\",\r\n        payload: { isLoggedIn: false, access_token: \"\" }\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport const createPost = (values, token) => async dispatch => {\r\n  try {\r\n    const response = await flaskAPI.post(\"/posts\", values, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    dispatch({ type: \"CREATE_POST\", payload: response.data });\r\n  } catch (err) {\r\n    console.log(err.response);\r\n  }\r\n};\r\n\r\nexport const logoutUser = token => async dispatch => {\r\n  try {\r\n    const response = await flaskAPI.delete(\"/logout\", {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    dispatch({ type: \"LOGOUT_USER\", payload: response.data });\r\n  } catch (err) {\r\n    console.log(err.response);\r\n  }\r\n};\r\n\r\nexport const deletePost = (token, id) => async dispatch => {\r\n  try {\r\n    const response = await flaskAPI.delete(`/posts/${id}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    dispatch({ type: \"DELETE_POST\", payload: id });\r\n  } catch (err) {\r\n    console.log(err.response);\r\n  }\r\n};\r\n\r\nexport const editPost = (values, token, id, type) => async dispatch => {\r\n  try {\r\n    const response = await flaskAPI.put(`/posts/${id}`, values, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    if (type === 1) dispatch({ type: \"EDIT_POST\", payload: response.data });\r\n    else if (type === 2)\r\n      dispatch({ type: \"EDIT_USER_POST\", payload: response.data });\r\n  } catch (err) {\r\n    console.log(err.response);\r\n  }\r\n};\r\n\r\nexport const createComment = (id, values, token) => async dispatch => {\r\n  try {\r\n    const response = await flaskAPI.post(`/comments/${id}`, values, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    let obj = { [id]: response.data };\r\n    dispatch({ type: \"CREATE_COMMENT\", payload: obj });\r\n  } catch (err) {\r\n    console.log(err.response);\r\n  }\r\n};\r\n\r\nexport const fetchComments = (id, token) => async dispatch => {\r\n  try {\r\n    const response = await flaskAPI.get(`/comments/${id}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    let obj = { [id]: response.data };\r\n    dispatch({ type: \"FETCH_COMMENTS\", payload: obj });\r\n  } catch (err) {\r\n    console.log(err.response);\r\n  }\r\n};\r\n\r\nexport const deleteComment = (token, id, postid) => async dispatch => {\r\n  try {\r\n    const response = await flaskAPI.delete(`/comments/${id}/${postid}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    let obj = { [postid]: response.data };\r\n    dispatch({ type: \"DELETE_COMMENT\", payload: obj });\r\n  } catch (err) {\r\n    console.log(err.response);\r\n  }\r\n};\r\n\r\nexport const fetchAvatars = token => async dispatch => {\r\n  try {\r\n    const response = await flaskAPI.get(`/avatar`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    if (response.status === 201) {\r\n      dispatch({ type: \"FETCH_AVATARS\", payload: response.data });\r\n    }\r\n  } catch (err) {\r\n    console.log(err.response);\r\n  }\r\n};\r\n\r\nexport const updateAvatar = (id, username, token) => async dispatch => {\r\n  try {\r\n    const response = await flaskAPI.get(`/avatar/${id}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    if (response.status === 201) {\r\n      let obj = { avatar: id, username: username };\r\n      dispatch({ type: \"UPDATE_AVATAR\", payload: [obj] });\r\n    }\r\n  } catch (err) {\r\n    console.log(err.response);\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { loginUser } from \"../actions\";\r\nimport \"../style.css\";\r\n\r\nclass Login extends React.Component {\r\n  renderInput({ input, label, type }) {\r\n    return (\r\n      <div>\r\n        <label>{label}</label>\r\n        <input {...input} type={type} className=\"ui input\" required />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onSubmit = values => {\r\n    this.props.loginUser(values);\r\n    this.props.change(`username`, null);\r\n    this.props.change(`password`, null);\r\n  };\r\n\r\n  errormsg() {\r\n    if (this.props.user.status === 422) {\r\n      return (\r\n        <div>\r\n          <p>Username/Password is incorrect</p>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.props.user.isLoggedIn) {\r\n      return <Redirect to=\"/dashboard\" />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"test\">\r\n        <h2>Login</h2>\r\n        <form\r\n          className=\"test\"\r\n          onSubmit={this.props.handleSubmit(this.onSubmit)}\r\n        >\r\n          <Field\r\n            name=\"username\"\r\n            label=\"Username\"\r\n            type=\"text\"\r\n            component={this.renderInput}\r\n          />\r\n          <Field\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            component={this.renderInput}\r\n          />\r\n          <button className=\"main_button\">Login</button>\r\n        </form>\r\n        {this.errormsg()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return { user: state.user };\r\n};\r\n\r\nexport default connect(mapStateToProps, { loginUser })(\r\n  reduxForm({\r\n    form: \"login\"\r\n  })(Login)\r\n);\r\n","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { connect } from \"react-redux\";\r\nimport { createUser } from \"../actions\";\r\nimport \"../style.css\";\r\n\r\nclass Register extends React.Component {\r\n  renderInput({ input, label, type }) {\r\n    return (\r\n      <div>\r\n        <label>{label}</label>\r\n        <input {...input} type={type} required />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onSubmit = values => {\r\n    this.props.createUser(values);\r\n  };\r\n\r\n  msg() {\r\n    if (this.props.user.status === 409) {\r\n      return (\r\n        <div>\r\n          <p>This email/username exists in our database</p>\r\n        </div>\r\n      );\r\n    } else if (this.props.user.status === 201) {\r\n      return (\r\n        <div>\r\n          <p>User Added. Login</p>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"test\">\r\n        <h2>Sign Up</h2>\r\n        <form\r\n          className=\"test\"\r\n          onSubmit={this.props.handleSubmit(this.onSubmit)}\r\n        >\r\n          <Field\r\n            name=\"name\"\r\n            label=\"Name\"\r\n            type=\"text\"\r\n            component={this.renderInput}\r\n          />\r\n          <Field\r\n            name=\"email\"\r\n            label=\"Email\"\r\n            type=\"email\"\r\n            component={this.renderInput}\r\n          />\r\n          <Field\r\n            name=\"username\"\r\n            label=\"Username\"\r\n            type=\"text\"\r\n            component={this.renderInput}\r\n          />\r\n          <Field\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            component={this.renderInput}\r\n          />\r\n          <button className=\"main_button\">Submit</button>\r\n        </form>\r\n        {this.msg()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return { user: state.user };\r\n};\r\n\r\nexport default connect(mapStateToProps, { createUser })(\r\n  reduxForm({\r\n    form: \"register\"\r\n  })(Register)\r\n);\r\n","import React from \"react\";\r\nimport Login from \"./Login\";\r\nimport Register from \"./Register\";\r\nimport \"../style.css\";\r\n\r\nclass Main extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"test cover_page\" id=\"main_background\">\r\n        <div id=\"main_container\">\r\n          <Login />\r\n          <Register />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Link } from \"react-router-dom\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { editPost } from \"../actions\";\r\nimport \"../style.css\";\r\n\r\nclass PostEdit extends React.Component {\r\n  renderInput({ input }) {\r\n    return (\r\n      <div>\r\n        {/*<input {...input} type={type} maxLength=\"150\" required/>*/}\r\n        <textarea\r\n          className=\"input-post\"\r\n          {...input}\r\n          maxLength=\"150\"\r\n          placeholder={\"Edit post\"}\r\n          rows=\"3\"\r\n          required\r\n        ></textarea>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onSubmit = values => {\r\n    this.props.editPost(\r\n      values,\r\n      this.props.user.access_token,\r\n      this.props.post.id,\r\n      this.props.type\r\n    );\r\n  };\r\n\r\n  render() {\r\n    if (\r\n      !this.props.user.isLoggedIn ||\r\n      !(this.props.post.username === this.props.user.username)\r\n    ) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n    return ReactDOM.createPortal(\r\n      <div\r\n        className=\"ui dimmer modals visible active\"\r\n        style={{ position: \"fixed\" }}\r\n      >\r\n        <div className=\"ui standard modal visible active\">\r\n          <div className=\"header\">{this.props.post.post}</div>\r\n          <div className=\"content\">\r\n            <form\r\n              onSubmit={this.props.handleSubmit(this.onSubmit)}\r\n              id=\"editForm\"\r\n            >\r\n              <Field name=\"post\" component={this.renderInput} />\r\n            </form>\r\n          </div>\r\n          <div className=\"actions\">\r\n            <div className=\"ui buttons\">\r\n              <button className=\"ui positive button\" form=\"editForm\">\r\n                Edit\r\n              </button>\r\n              <div className=\"or\"></div>\r\n              <button className=\"ui button\" onClick={this.props.editClose}>\r\n                close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>,\r\n      document.querySelector(\"#modal\")\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  if (ownProps.type === 1)\r\n    return { user: state.user, post: state.post[ownProps.id] };\r\n  else if (ownProps.type === 2)\r\n    return { user: state.user, post: state.userPost[ownProps.id] };\r\n};\r\n\r\nexport default connect(mapStateToProps, { editPost })(\r\n  reduxForm({\r\n    form: \"editedForm\"\r\n  })(PostEdit)\r\n);\r\n","const avatarInfo = {\r\n  \"1\": \"https://semantic-ui.com/images/avatar2/large/elyse.png\",\r\n  \"2\": \"https://semantic-ui.com/images/avatar2/large/kristy.png\",\r\n  \"3\": \"https://semantic-ui.com/images/avatar2/large/lena.png\",\r\n  \"4\": \"https://semantic-ui.com/images/avatar2/large/lindsay.png\",\r\n  \"5\": \"https://semantic-ui.com/images/avatar2/large/mark.png\",\r\n  \"6\": \"https://semantic-ui.com/images/avatar2/large/matthew.png\"\r\n};\r\n\r\nconst avatarOptions = [\r\n  {\r\n    key: \"1\",\r\n    value: \"1\",\r\n    image: {\r\n      avatar: true,\r\n      src: \"https://semantic-ui.com/images/avatar2/large/elyse.png\"\r\n    }\r\n  },\r\n  {\r\n    key: \"2\",\r\n    value: \"2\",\r\n    image: {\r\n      avatar: true,\r\n      src: \"https://semantic-ui.com/images/avatar2/large/kristy.png\"\r\n    }\r\n  },\r\n  {\r\n    key: \"3\",\r\n    value: \"3\",\r\n    image: {\r\n      avatar: true,\r\n      src: \"https://semantic-ui.com/images/avatar2/large/lena.png\"\r\n    }\r\n  },\r\n  {\r\n    key: \"4\",\r\n    value: \"4\",\r\n    image: {\r\n      avatar: true,\r\n      src: \"https://semantic-ui.com/images/avatar2/large/lindsay.png\"\r\n    }\r\n  },\r\n  {\r\n    key: \"5\",\r\n    value: \"5\",\r\n    image: {\r\n      avatar: true,\r\n      src: \"https://semantic-ui.com/images/avatar2/large/mark.png\"\r\n    }\r\n  },\r\n  {\r\n    key: \"6\",\r\n    value: \"6\",\r\n    image: {\r\n      avatar: true,\r\n      src: \"https://semantic-ui.com/images/avatar2/large/matthew.png\"\r\n    }\r\n  }\r\n];\r\nexport { avatarInfo, avatarOptions };\r\n","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { connect } from \"react-redux\";\r\nimport { createComment, fetchComments, deleteComment } from \"../actions\";\r\nimport ReactEmoji from \"react-emoji\";\r\nimport { avatarInfo } from \"../helper\";\r\n\r\nimport \"../style.css\";\r\n\r\nclass Comment extends React.Component {\r\n  renderInput({ input, placeholder }) {\r\n    return (\r\n      <textarea\r\n        className=\"input-comment\"\r\n        {...input}\r\n        maxLength=\"150\"\r\n        placeholder={placeholder}\r\n        rows=\"2\"\r\n        required\r\n      ></textarea>\r\n    );\r\n  }\r\n\r\n  onSubmit = values => {\r\n    let newValues = {\r\n      comment: values[`comment${this.props.id}`]\r\n    };\r\n    this.props.createComment(\r\n      this.props.id,\r\n      newValues,\r\n      this.props.user.access_token\r\n    );\r\n    this.props.change(`comment${this.props.id}`, null);\r\n  };\r\n  componentDidMount() {\r\n    this.props.fetchComments(this.props.id, this.props.user.access_token);\r\n  }\r\n  deleteOnClick = id => {\r\n    this.props.deleteComment(this.props.user.access_token, id, this.props.id);\r\n  };\r\n\r\n  renderDelete = comment => {\r\n    if (comment.username === this.props.user.username || this.props.user.role) {\r\n      return (\r\n        <div className=\"post-buttons-containter\">\r\n          <i\r\n            className=\"trash icon large button-delete\"\r\n            onClick={this.deleteOnClick.bind(this, comment.id)}\r\n            Aria-label=\"click to delete post\"\r\n          ></i>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n  renderComments = id => {\r\n    if (this.props.comment[`${id}`]) {\r\n      return this.props.comment[`${id}`].map(comment => {\r\n        return (\r\n          <div className=\"comment\" key={comment.id}>\r\n            <div className=\"post-text-container\">\r\n              {ReactEmoji.emojify(comment.comment)}\r\n            </div>\r\n            <img\r\n              src={\r\n                this.props.avatar[comment.username]\r\n                  ? avatarInfo[this.props.avatar[comment.username].avatar]\r\n                  : \"https://semantic-ui.com/images/avatar2/large/elyse.png\"\r\n              }\r\n              alt=\"image\"\r\n              className=\"ui avatar image\"\r\n            />\r\n            <div className=\"post-username-container\">{comment.username}</div>\r\n            <div className=\"post-date-container\">\r\n              {comment.date.substr(0, 10)}\r\n            </div>\r\n            {this.renderDelete(comment)}\r\n          </div>\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"input-comment-container\">\r\n        {this.renderComments(this.props.id)}\r\n        <form\r\n          className=\"comment-form\"\r\n          onSubmit={this.props.handleSubmit(this.onSubmit)}\r\n        >\r\n          <Field\r\n            name={`comment${this.props.id}`}\r\n            type=\"text\"\r\n            placeholder=\"Write a Comment\"\r\n            component={this.renderInput}\r\n          />\r\n          <button className=\"post-button\">Comment</button>\r\n        </form>\r\n        {/* <button onClick={this.loadOnClick()}>Load Comments</button> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { user: state.user, comment: state.comment, avatar: state.avatar };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  createComment,\r\n  fetchComments,\r\n  deleteComment\r\n})(\r\n  reduxForm({\r\n    form: \"comment\"\r\n  })(Comment)\r\n);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ReactEmoji from \"react-emoji\";\r\nimport PostEdit from \"./PostEdit\";\r\nimport Comment from \"./Comment\";\r\nimport { avatarInfo } from \"../helper\";\r\nimport { fetchPosts, fetchSomePosts, deletePost } from \"../actions\";\r\nimport \"../style.css\";\r\n\r\nclass PostsLists extends React.Component {\r\n  state = {\r\n    id: null,\r\n    show: false\r\n  };\r\n  componentDidMount() {\r\n    if (this.props.user.isLoggedIn)\r\n      this.props.fetchSomePosts(this.props.user.access_token, 8);\r\n  }\r\n  more = () => {\r\n    this.props.fetchSomePosts(\r\n      this.props.user.access_token,\r\n      this.props.post.length + 3\r\n    );\r\n  };\r\n\r\n  deleteOnClick = id => {\r\n    this.props.deletePost(this.props.user.access_token, id);\r\n  };\r\n  editOpen = id => {\r\n    this.setState({ id: id, show: true });\r\n  };\r\n  editClose = () => {\r\n    this.setState({ show: false });\r\n  };\r\n  displayComment = id => {\r\n    return <Comment id={id} />;\r\n  };\r\n  renderDeleteEdit = post => {\r\n    if (post.username === this.props.user.username || this.props.user.role) {\r\n      return (\r\n        <div className=\"post-buttons-containter\">\r\n          <i\r\n            className=\"edit icon large button-edit\"\r\n            onClick={this.editOpen.bind(this, post.id)}\r\n            Aria-label=\"click to edit post\"\r\n          ></i>\r\n          <i\r\n            className=\"trash icon large button-delete\"\r\n            onClick={this.deleteOnClick.bind(this, post.id)}\r\n            Aria-label=\"click to delete post\"\r\n          ></i>\r\n\r\n          {/* <button className=\"button-edit\" onClick={this.editOpen.bind(this,post.id)}>Edit</button> */}\r\n          {/* <button className=\"button-delete\" onClick={this.deleteOnClick.bind(this,post.id)}>Delete</button> */}\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  renderPosts = () => {\r\n    return this.props.post.map(post => {\r\n      return (\r\n        <div className=\"post\" key={post.id}>\r\n          <div className=\"post-text-container\">\r\n            {ReactEmoji.emojify(post.post)}\r\n          </div>\r\n          <img\r\n            src={\r\n              this.props.avatar[post.username]\r\n                ? avatarInfo[this.props.avatar[post.username].avatar]\r\n                : \"https://semantic-ui.com/images/avatar2/large/elyse.png\"\r\n            }\r\n            alt=\"image\"\r\n            className=\"ui avatar image\"\r\n          />\r\n          <div className=\"post-username-container\">{post.username}</div>\r\n          <div className=\"post-date-container\">{post.date.substr(0, 10)}</div>\r\n          {this.renderDeleteEdit(post)}\r\n          {this.displayComment(post.id)}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n  checkMore() {\r\n    if (!this.props.user.noMoreAll)\r\n      return <button onClick={this.more}>More</button>;\r\n  }\r\n  renderEdit() {\r\n    if (this.state.show) {\r\n      return (\r\n        <PostEdit\r\n          id={this.state.id}\r\n          show={this.state.show}\r\n          editClose={this.editClose}\r\n          type={1}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.props.post.length) {\r\n      return (\r\n        <div className=\"posts_container\">\r\n          {this.checkMore()}\r\n          {this.renderPosts()}\r\n          {this.renderEdit()}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.user,\r\n    post: Object.values(state.post),\r\n    avatar: state.avatar\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  fetchPosts,\r\n  fetchSomePosts,\r\n  deletePost\r\n})(PostsLists);\r\n","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { connect } from \"react-redux\";\r\nimport { createPost } from \"../actions\";\r\nimport \"../style.css\";\r\n\r\nclass CreatePost extends React.Component {\r\n  renderInput({ input, placeholder }) {\r\n    return (\r\n      <textarea\r\n        className=\"input-post\"\r\n        {...input}\r\n        maxLength=\"150\"\r\n        placeholder={placeholder}\r\n        rows=\"3\"\r\n        required\r\n      ></textarea>\r\n    );\r\n  }\r\n\r\n  onSubmit = values => {\r\n    this.props.createPost(values, this.props.user.access_token);\r\n    this.props.change(\"post\", null);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"input-post-container\">\r\n        <form\r\n          className=\"test\"\r\n          onSubmit={this.props.handleSubmit(this.onSubmit)}\r\n        >\r\n          <Field\r\n            name=\"post\"\r\n            type=\"text\"\r\n            placeholder=\"What are you thinking about?\"\r\n            component={this.renderInput}\r\n          />\r\n          <button className=\"post-button\">Post</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { user: state.user };\r\n};\r\n\r\nexport default connect(mapStateToProps, { createPost })(\r\n  reduxForm({\r\n    form: \"post\"\r\n  })(CreatePost)\r\n);\r\n","import React from \"react\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport { connect } from \"react-redux\";\r\nimport { logoutUser } from \"../actions\";\r\nimport \"../style.css\";\r\n\r\nclass Logout extends React.Component {\r\n  onSubmit = () => {\r\n    this.props.logoutUser(this.props.user.access_token);\r\n    window.localStorage.clear();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n          <button className=\"logout\">Logout</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { user: state.user };\r\n};\r\n\r\nexport default connect(mapStateToProps, { logoutUser })(\r\n  reduxForm({\r\n    form: \"logout\"\r\n  })(Logout)\r\n);\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Logout from \"./Logout\";\r\nimport { avatarInfo } from \"../helper\";\r\n\r\nconst Header = props => {\r\n  return (\r\n    <div className=\"header-custom\">\r\n      <img\r\n        src={\r\n          props.avatar[props.user.username]\r\n            ? avatarInfo[props.avatar[props.user.username].avatar]\r\n            : \"https://semantic-ui.com/images/avatar2/large/elyse.png\"\r\n        }\r\n        alt=\"image\"\r\n        className=\"ui avatar image\"\r\n      />\r\n      <Link className=\"nav-item\" to=\"/profile\">\r\n        {props.user.username}\r\n      </Link>\r\n      <Link className=\"nav-item\" to=\"/dashboard\">\r\n        home\r\n      </Link>\r\n      <Logout />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return { user: state.user, avatar: state.avatar };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Header);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Link } from \"react-router-dom\";\r\nimport { fetchAvatars } from \"../actions\";\r\nimport PostsLists from \"./PostsLists\";\r\nimport CreatePost from \"./CreatePost\";\r\nimport Header from \"./Header\";\r\nimport \"../style.css\";\r\n\r\nclass Dashboard extends React.Component {\r\n  componentDidMount() {\r\n    this.props.fetchAvatars(this.props.user.access_token);\r\n  }\r\n  render() {\r\n    if (!this.props.user.isLoggedIn) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n    return (\r\n      <div className=\"cover_page\" style={{ backgroundColor: \"#f0f2f5\" }}>\r\n        <div className=\"test1\">\r\n          <Header />\r\n          <CreatePost />\r\n          <PostsLists />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { user: state.user };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchAvatars })(Dashboard);\r\n","import React from \"react\";\r\nimport { Dropdown } from \"semantic-ui-react\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateAvatar } from \"../actions\";\r\nimport { avatarOptions } from \"../helper\";\r\n\r\nclass AvatarDropdown extends React.Component {\r\n  onAvatarChange = (e, data) => {\r\n    this.props.updateAvatar(\r\n      data.value,\r\n      this.props.user.username,\r\n      this.props.user.access_token\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Dropdown\r\n        text=\"Update Avatar\"\r\n        icon=\"file image icon\"\r\n        floating\r\n        labeled\r\n        button\r\n        className=\"icon\"\r\n      >\r\n        <Dropdown.Menu>\r\n          <Dropdown.Header content=\"Pick your avatar\" />\r\n          {avatarOptions.map(option => (\r\n            <Dropdown.Item\r\n              onClick={this.onAvatarChange}\r\n              key={option.value}\r\n              {...option}\r\n            />\r\n          ))}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { user: state.user };\r\n};\r\n\r\nexport default connect(mapStateToProps, { updateAvatar })(AvatarDropdown);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport AvatarDropdown from \"./AvatarDropdown\";\r\nimport { avatarInfo } from \"../helper\";\r\n\r\nimport \"../style.css\";\r\n\r\nclass Personal extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"personal-container\">\r\n        <div className=\"image-container\">\r\n          <img\r\n            src={\r\n              this.props.avatar[this.props.user.username]\r\n                ? avatarInfo[this.props.avatar[this.props.user.username].avatar]\r\n                : \"https://semantic-ui.com/images/avatar2/large/elyse.png\"\r\n            }\r\n            alt=\"image\"\r\n            className=\"ui large image\"\r\n          />\r\n        </div>\r\n        <div className=\"info-container\">\r\n          <span className=\"info-text\">Username:</span>{\" \"}\r\n          {this.props.user.username}\r\n          <br />\r\n          <span className=\"info-text\">Email:</span> {this.props.user.email}\r\n          <div className=\"dropdown-icon\">\r\n            <AvatarDropdown />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { user: state.user, avatar: state.avatar };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {}\r\n)(\r\n  reduxForm({\r\n    form: \"file\"\r\n  })(Personal)\r\n);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport ReactEmoji from \"react-emoji\";\r\nimport { deletePost, fetchUserPosts } from \"../actions\";\r\nimport PostEdit from \"./PostEdit\";\r\nimport Header from \"./Header\";\r\nimport Personal from \"./Personal\";\r\nimport { avatarInfo } from \"../helper\";\r\n\r\nimport \"../style.css\";\r\n\r\nclass Profile extends React.Component {\r\n  state = {\r\n    id: null,\r\n    show: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.user.isLoggedIn)\r\n      this.props.fetchUserPosts(\r\n        this.props.user.access_token,\r\n        this.props.user.username,\r\n        8\r\n      );\r\n  }\r\n  more = () => {\r\n    this.props.fetchUserPosts(\r\n      this.props.user.access_token,\r\n      this.props.user.username,\r\n      this.props.post.length + 3\r\n    );\r\n  };\r\n\r\n  deleteOnClick = id => {\r\n    this.props.deletePost(this.props.user.access_token, id);\r\n  };\r\n  editOpen = id => {\r\n    this.setState({ id: id, show: true });\r\n  };\r\n  editClose = () => {\r\n    this.setState({ show: false });\r\n  };\r\n\r\n  renderDeleteEdit = post => {\r\n    if (post.username === this.props.user.username || this.props.user.role) {\r\n      return (\r\n        <div className=\"post-buttons-containter\">\r\n          {/* <button className=\"button-edit\" onClick={this.editOpen.bind(this,post.id)}>Edit</button>\r\n                <button className=\"button-delete\" onClick={this.deleteOnClick.bind(this,post.id)}>Delete</button> */}\r\n          <i\r\n            className=\"edit icon large button-edit\"\r\n            onClick={this.editOpen.bind(this, post.id)}\r\n            Aria-label=\"click to edit post\"\r\n          ></i>\r\n          <i\r\n            className=\"trash icon large button-delete\"\r\n            onClick={this.deleteOnClick.bind(this, post.id)}\r\n            Aria-label=\"click to delete post\"\r\n          ></i>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  renderPosts() {\r\n    return this.props.post.map(post => {\r\n      return (\r\n        <div className=\"post\" key={post.id}>\r\n          <div className=\"post-text-container\">\r\n            {ReactEmoji.emojify(post.post)}\r\n          </div>\r\n          <img\r\n            src={\r\n              this.props.avatar[post.username]\r\n                ? avatarInfo[this.props.avatar[post.username].avatar]\r\n                : \"https://semantic-ui.com/images/avatar2/large/elyse.png\"\r\n            }\r\n            alt=\"image\"\r\n            className=\"ui avatar image\"\r\n          />\r\n          <div className=\"post-username-container\">{post.username}</div>\r\n          <div className=\"post-date-container\">{post.date.substr(0, 10)}</div>\r\n          {this.renderDeleteEdit(post)}\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n  checkMore() {\r\n    if (!this.props.user.noMoreUser)\r\n      return <button onClick={this.more}>More</button>;\r\n  }\r\n  renderEdit() {\r\n    if (this.state.show) {\r\n      return (\r\n        <PostEdit\r\n          id={this.state.id}\r\n          show={this.state.show}\r\n          editClose={this.editClose}\r\n          type={2}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.user.isLoggedIn) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n    return (\r\n      <div className=\"cover_page\" style={{ backgroundColor: \"#f0f2f5\" }}>\r\n        <div className=\"test1\">\r\n          <Header />\r\n          <Personal />\r\n          <div className=\"posts_container\">\r\n            {this.checkMore()}\r\n            {this.renderPosts()}\r\n            {this.renderEdit()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.user,\r\n    post: Object.values(state.userPost),\r\n    avatar: state.avatar\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchUserPosts, deletePost })(\r\n  Profile\r\n);\r\n","import React from \"react\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\nimport Main from \"./Main\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport Profile from \"./Profile\";\r\nimport \"../style.css\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"cover_page\">\r\n        <BrowserRouter>\r\n          <div className=\"cover_page\">\r\n            <Route path=\"/\" exact component={Main} />\r\n            <Route path=\"/dashboard\" exact component={Dashboard} />\r\n            <Route path=\"/profile\" exact component={Profile} />\r\n          </div>\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { loginUser, logoutUser, fetchPosts, fetchSomePosts } from \"../actions\";\r\n\r\nexport default (\r\n  state = {\r\n    status: 200,\r\n    avatar: \"https://semantic-ui.com/images/avatar/small/stevie.jpg\"\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case \"LOGIN_USER\":\r\n      return { ...state, ...action.payload };\r\n    case \"LOGOUT_USER\":\r\n      return { ...state, ...action.payload };\r\n    case \"LOGIN_ERROR\":\r\n      return { ...state, ...action.payload };\r\n    case \"REGISTER_USER\":\r\n      return { ...state, ...action.payload };\r\n    case \"REGISTER_ERROR\":\r\n      return { ...state, ...action.payload };\r\n    case \"AUTH_ERROR\":\r\n      return { ...state, ...action.payload };\r\n    case \"NO_MORE\":\r\n      return { ...state, ...action.payload };\r\n    case \"UPDATE_AVATAR\":\r\n      return { ...state, ...action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import _ from \"lodash\";\r\nimport { fetchAvatars, updateAvatar } from \"../actions\";\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_AVATARS\":\r\n      return { ...state, ..._.mapKeys(action.payload, \"username\") };\r\n    case \"UPDATE_AVATAR\":\r\n      return { ...state, ..._.mapKeys(action.payload, \"username\") };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport userReducer from \"./userReducer\";\r\nimport postsReducer from \"./postReducer\";\r\nimport userPostsReducer from \"./userPostsReducer\";\r\nimport commentReducer from \"./commentReducer\";\r\nimport avatarReducer from \"./avatarReducer\";\r\n\r\nexport default combineReducers({\r\n  form: formReducer,\r\n  user: userReducer,\r\n  post: postsReducer,\r\n  userPost: userPostsReducer,\r\n  comment: commentReducer,\r\n  avatar: avatarReducer\r\n});\r\n","import _ from \"lodash\";\r\nimport {\r\n  fetchPosts,\r\n  fetchSomePosts,\r\n  createPost,\r\n  deletePost,\r\n  editPost\r\n} from \"../actions\";\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_POSTS\":\r\n      return { ...state, ..._.mapKeys(action.payload, \"id\") };\r\n    case \"CREATE_POST\":\r\n      return { ...state, ..._.mapKeys(action.payload, \"id\") };\r\n    case \"DELETE_POST\":\r\n      return _.omit(state, action.payload);\r\n    case \"EDIT_POST\":\r\n      return { ...state, ..._.mapKeys([action.payload], \"id\") };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import _ from \"lodash\";\r\nimport { fetchUserPosts, editPost, deletePost } from \"../actions\";\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_USER_POSTS\":\r\n      return { ...state, ..._.mapKeys(action.payload, \"id\") };\r\n    case \"DELETE_POST\":\r\n      return _.omit(state, action.payload);\r\n    case \"EDIT_USER_POST\":\r\n      return { ...state, ..._.mapKeys([action.payload], \"id\") };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import _ from \"lodash\";\r\nimport { createComment, fetchComments, deleteComment } from \"../actions\";\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"CREATE_COMMENT\":\r\n      return { ...state, ...action.payload };\r\n    case \"FETCH_COMMENTS\":\r\n      return { ...state, ...action.payload };\r\n    case \"DELETE_COMMENT\":\r\n      return { ...state, ...action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport reduxThunk from \"redux-thunk\";\r\n\r\nimport App from \"./components/App\";\r\nimport reducers from \"./reducers\";\r\n\r\nconst presistedState = loadFromSessionStorage();\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  presistedState,\r\n  applyMiddleware(reduxThunk)\r\n);\r\n\r\nReactDom.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector(\"#root\")\r\n);\r\n\r\nfunction saveToSessionStorage(state) {\r\n  const serializedState = JSON.stringify(state);\r\n  sessionStorage.setItem(\"state\", serializedState);\r\n}\r\n\r\nfunction loadFromSessionStorage() {\r\n  const serializedState = sessionStorage.getItem(\"state\");\r\n  if (serializedState === null) return undefined;\r\n  return JSON.parse(serializedState);\r\n}\r\n\r\nstore.subscribe(() => saveToSessionStorage(store.getState()));\r\n"],"sourceRoot":""}